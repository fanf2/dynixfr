# Introduction

Incremental zone transfer (IXFR, [](#RFC1995)) was introduced to efficiently
transfer changed portions of a zone. However, when a zone is signed with
DNSSEC [](#RFC4033), [](#RFC4034), [](#RFC4035), the transfer may still
become very large. For example, when many resource record sets (RRsets) need
a re-sign, or when the NSEC3 [](#RFC5155) salt is changed, an IXFR may
become larger than a full zone transfer (AXFR, [](#RFC5936)). 

To keep the deltas small in zone transfers, we need to have a richer
update syntax, for example like in Dynamic Update (DNS UPDATE, [](#RFC2136).
This document introduces a new query type DXFR (dynamic zone transfer) that
is able to express this richer syntax.

An earlier proposal to keep the zone transfers small is
IXFR-ONLY [](#IXFR-ONLY), by giving the client an oppurtunity to signal
the server that it prefers an error above a fall back to an AXFR in case the
server is not able to send an IXFR.

# Definitions

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in [](#RFC2119).

# Syntax

The syntax for IXFR is a subset of DXFR, the richer syntax fo DXFR allows to
add or delete multiple records with one resource record (RR).

## Add an RR

This works the same as with IXFR.

## Delete an RR

This works the same as with IXFR.

## Delete an RRset

Similar to DNS UPDATE, one RR is added whose NAME and TYPE are those
of the RRset to be deleted. CLASS must be specified as ANY.
RDLENGTH must be zero (0) and RDATA must therefore be empty.

## Delete All RRsets on a Name

Similar to DNS UPDATE, one RR is added whose NAME is that of the name
to be cleansed of RRsets. TYPE must be specified as ANY. CLASS must be
specified as ANY.  RDLENGTH must be zero (0) and RDATA must therefore be
empty.

## Delete All RRsets of a Type

One RR is added whose NAME is that of the apex of the zone. TYPE must be
specified as the TYPE of the RRsets to be deleted. CLASS must be specified as
ANY. RDLENGTH must be zero (0) and RDATA must therefore be empty.

# Protocol Description

## Client side

The client can send a DXFR request. Just like with IXFR, it can add a SOA
RR in the authority section to signal the version of the zone it holds now.
If the client does not want the server to fall back to AXFR, it can add
another SOA RR in the additional section. This achieves DXFR-only behavior, 
similar to IXFR-ONLY [](#IXFR-ONLY). For example:

    ;; ->>HEADER<<- opcode: QUERY, rcode: NOERROR, id: 1337
    ;; flags: qr ; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1
    ;; QUESTION SECTION:
    ;; example.    IN    DXFR
    
    ;; AUTHORITY SECTION:
    example.       IN    SOA    serial=1
    
    ;; ADDITIONAL SECTION:
    example.       IN    SOA    serial=1
^[fig:a-dxfr-request::A DXFR request for the "example." zone.]

## Server side

A server receiving a dynamic zone transfer (DXFR) request will reply with
a DXFR. A DXFR looks exactly like an IXFR, except there may be zero or more
of the new introduced syntax RRs that can add or delete more records.
For `example.`, the following zone transfer can be send that will
replace all signatures in the zone with new signatures for the names
`example.`, `a.example.`, `b.example.` and `c.example.`:

    ;; ->>HEADER<<- opcode: QUERY, rcode: NOERROR, id: 1337
    ;; flags: qr ; QUERY: 1, ANSWER: 9, AUTHORITY: 0, ADDITIONAL: 0 
    ;; QUESTION SECTION:
    ;; example.    IN    DXFR
    
    ;; ANSWER SECTION:
    example.       IN    SOA    serial=3
    example.       IN    SOA    serial=1
    example.       ANY   RRSIG
    example.       IN    SOA    serial=3
    example.       IN    RRSIG  rdata
    a.example.     IN    RRSIG  rdata
    b.example.     IN    RRSIG  rdata
    c.example.     IN    RRSIG  rdata
    example.       IN    SOA    serial=3   
^[fig:a-dxfr-response::A DXFR response for the "example." zone.]

If the DXFR is larger than an AXFR, then the server MAY reply with an AXFR
instead.

# Data Minimization

The proposal described in the previous section significantly reduces the size
of a zone transfer compared with IXFR. However, when a zone has changed its
NSEC3 salt, the impact is less impressive. This is because you need to
remove all NSEC3 records and all its corresponding signatures. The first
part is achieved with:

    example.       ANY   NSEC3
^[fig:delete-all-nsec3::Record to delete all RRsets of type NSEC3.]

But we can't do the same for part two, because there are other signatures
than those covering type NSEC3.

However, because RRSIG records are tightly related to its RRset we can
introduce some additional data minimization rules.

## Delete an RR or an RRset

When deleting an RR or a complete RRset, the IXFR client MUST also
remove all existing RRSIG records on that RRset. This is valid for all RRtypes
except RRSIG itself.

## Replace option

Instead of doing a delete RRset and add RRset, we could introdcuce new syntax
that does a replace RRset. This can save another RR in DXFR per deleted RRset.

Todo: describe syntax for replace

## More optimizations

We can optimize the transfer even more, because when adding an RRset we
duplicate a lot of owner names, class and type fields. For example. we could
add an NS RRset of three records like this:

    ADD example. IN NS 3 ns1.example. ns2.example. ns3.example.
^[fig:add-ns-rrset::Optimized addition of an NS RRset.]

With such a syntax, we can do more things like

    REPLACE       <name> <type> <n> <rdata>{n}
    REPLACE-RRSIG <name> <type> <n> <rdata>{n}
    SOA           <serial>
^[fig:optimized-xfr::Optimized syntax ideas for DXFR.]


# IANA Considerations

IANA should assign the RR type value [TBD] (decimal) for DXFR.

# Security Considerations

This document does not introduce additional security considerations.

# Acknowledgements

Johan Ihren, Tony Finch.

# Changelog

## 00

* Initial document.
